{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leona\\\\OneDrive\\\\Documentos\\\\Universidad\\\\Octavo semestre\\\\Programaci\\xF3n web\\\\mi-proyecto-react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState } from 'react';\n\n// Componente Square: representa un solo cuadro en el tablero.\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\n// Componente Board: representa el tablero del juego.\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay\n}) {\n  // Maneja el clic en un cuadro del tablero.\n  function handleClick(i) {\n    // Si hay un ganador o el cuadro ya está ocupado, no hacer nada.\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    // Crear una nueva copia del arreglo de cuadros.\n    const nextSquares = squares.slice();\n\n    // Asigna 'X' o 'O' según el turno.\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n\n    // Llama a la función para actualizar el estado del juego.\n    onPlay(nextSquares);\n  }\n\n  // Verifica si hay un ganador.\n  const winner = calculateWinner(squares);\n\n  // Muestra el estado actual del juego (ganador o siguiente jugador).\n  let status;\n  if (winner) {\n    status = 'Ganador: ' + winner;\n  } else {\n    status = 'Siguiente jugador: ' + (xIsNext ? 'X' : 'O');\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n// Componente principal del juego.\n_c2 = Board;\nexport default function Game() {\n  _s();\n  // Estado que almacena el historial de movimientos.\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n\n  // Estado que indica el movimiento actual.\n  const [currentMove, setCurrentMove] = useState(0);\n\n  // Determina si el siguiente jugador es 'X' o 'O'.\n  const xIsNext = currentMove % 2 === 0;\n\n  // Obtiene el estado actual del tablero.\n  const currentSquares = history[currentMove];\n\n  // Maneja un nuevo movimiento en el juego.\n  function handlePlay(nextSquares) {\n    // Crea un nuevo historial truncando los movimientos posteriores al actual.\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n\n    // Actualiza el historial y el movimiento actual.\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  // Permite retroceder a un movimiento anterior.\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  // Crea la lista de movimientos para la historia del juego.\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Ir al movimiento #' + move;\n    } else {\n      description = 'Ir al inicio del juego';\n    }\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n// Función para determinar si hay un ganador.\n_s(Game, \"xZZdy1/aP1agxyjHn6CL01lXnXc=\");\n_c3 = Game;\nfunction calculateWinner(squares) {\n  // Todas las combinaciones ganadoras posibles en un tablero de 3x3.\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  // Recorre todas las combinaciones posibles y verifica si hay un ganador.\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a]; // Retorna el símbolo del jugador que ganó ('X' o 'O').\n    }\n  }\n  return null; // No hay ganador.\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","handleClick","i","calculateWinner","nextSquares","slice","winner","status","_c2","Game","_s","history","setHistory","Array","fill","currentMove","setCurrentMove","currentSquares","handlePlay","nextHistory","length","jumpTo","nextMove","moves","map","move","description","_c3","lines","a","b","c","$RefreshReg$"],"sources":["C:/Users/leona/OneDrive/Documentos/Universidad/Octavo semestre/Programación web/mi-proyecto-react/src/App.js"],"sourcesContent":["import './App.css';\nimport { useState } from 'react';\n\n// Componente Square: representa un solo cuadro en el tablero.\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\n// Componente Board: representa el tablero del juego.\nfunction Board({ xIsNext, squares, onPlay }) {\n  // Maneja el clic en un cuadro del tablero.\n  function handleClick(i) {\n    // Si hay un ganador o el cuadro ya está ocupado, no hacer nada.\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    // Crear una nueva copia del arreglo de cuadros.\n    const nextSquares = squares.slice();\n\n    // Asigna 'X' o 'O' según el turno.\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n\n    // Llama a la función para actualizar el estado del juego.\n    onPlay(nextSquares);\n  }\n\n  // Verifica si hay un ganador.\n  const winner = calculateWinner(squares);\n\n  // Muestra el estado actual del juego (ganador o siguiente jugador).\n  let status;\n  if (winner) {\n    status = 'Ganador: ' + winner;\n  } else {\n    status = 'Siguiente jugador: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      {/* Renderiza el tablero con 9 cuadros en una cuadrícula 3x3 */}\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\n// Componente principal del juego.\nexport default function Game() {\n  // Estado que almacena el historial de movimientos.\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n\n  // Estado que indica el movimiento actual.\n  const [currentMove, setCurrentMove] = useState(0);\n\n  // Determina si el siguiente jugador es 'X' o 'O'.\n  const xIsNext = currentMove % 2 === 0;\n\n  // Obtiene el estado actual del tablero.\n  const currentSquares = history[currentMove];\n\n  // Maneja un nuevo movimiento en el juego.\n  function handlePlay(nextSquares) {\n    // Crea un nuevo historial truncando los movimientos posteriores al actual.\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n\n    // Actualiza el historial y el movimiento actual.\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  // Permite retroceder a un movimiento anterior.\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  // Crea la lista de movimientos para la historia del juego.\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Ir al movimiento #' + move;\n    } else {\n      description = 'Ir al inicio del juego';\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        {/* Renderiza el tablero con la configuración actual */}\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        {/* Muestra el historial de movimientos */}\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\n// Función para determinar si hay un ganador.\nfunction calculateWinner(squares) {\n  // Todas las combinaciones ganadoras posibles en un tablero de 3x3.\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  // Recorre todas las combinaciones posibles y verifica si hay un ganador.\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a]; // Retorna el símbolo del jugador que ganó ('X' o 'O').\n    }\n  }\n  return null; // No hay ganador.\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}