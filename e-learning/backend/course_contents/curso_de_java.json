{
  "courseInfo": {
    "title": "Curso Completo de Java",
    "description": "Aprende Java desde los fundamentos hasta programación orientada a objetos y desarrollo de aplicaciones robustas",
    "duration": "12-14 semanas",
    "level": "Principiante a Intermedio",
    "prerequisites": ["Lógica de programación básica", "Manejo básico de computadora", "IDE (IntelliJ IDEA o Eclipse)", "JDK 17 o superior instalado"]
  },
  "chapters": [
    {
      "title": "Introducción a Java y Configuración del Entorno",
      "description": "Historia de Java, características del lenguaje y configuración del entorno de desarrollo.",
      "video": "https://www.youtube.com/embed/U709ktN2N7c",
      "duration": "60 minutos",
      "topics": [
        "Historia y características de Java",
        "JVM, JRE y JDK: diferencias y componentes",
        "Instalación de JDK y configuración de variables de entorno",
        "IDEs populares: IntelliJ IDEA, Eclipse, NetBeans",
        "Primer programa: 'Hola Mundo'",
        "Compilación y ejecución de programas Java",
        "Estructura básica de un programa Java"
      ],
      "resources": [
        "https://docs.oracle.com/en/java/",
        "https://www.oracle.com/java/technologies/downloads/",
        "https://www.jetbrains.com/idea/",
        "https://www.eclipse.org/downloads/"
      ],
      "exercises": [
        "Instalar JDK y configurar variables de entorno",
        "Crear y ejecutar tu primer programa 'Hola Mundo'",
        "Experimentar con diferentes IDEs",
        "Crear un programa que imprima información personal"
      ],
      "keyPoints": [
        "Java es multiplataforma gracias a la JVM",
        "Write Once, Run Anywhere (WORA)",
        "Java es fuertemente tipado y orientado a objetos"
      ]
    },
    {
      "title": "Sintaxis Básica y Tipos de Datos",
      "description": "Variables, tipos de datos primitivos, operadores y entrada/salida básica.",
      "video": "https://www.youtube.com/embed/eIrMbAQSU34",
      "duration": "75 minutos",
      "topics": [
        "Variables y constantes",
        "Tipos de datos primitivos: int, double, boolean, char",
        "Tipos de datos de referencia: String",
        "Operadores aritméticos, relacionales y lógicos",
        "Conversión de tipos (casting)",
        "Entrada de datos con Scanner",
        "Formateo de salida con System.out",
        "Convenciones de nomenclatura en Java"
      ],
      "resources": [
        "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/",
        "https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html",
        "https://www.w3schools.com/java/java_data_types.asp"
      ],
      "exercises": [
        "Crear una calculadora básica con operaciones aritméticas",
        "Programa que convierta temperaturas (Celsius a Fahrenheit)",
        "Calculadora de IMC con entrada del usuario",
        "Programa que determine si un número es par o impar"
      ]
    },
    {
      "title": "Estructuras de Control",
      "description": "Condicionales, bucles y control de flujo del programa.",
      "video": "https://www.youtube.com/embed/ldYLYRNaucM",
      "duration": "80 minutos",
      "topics": [
        "Estructura condicional if-else",
        "Operador ternario",
        "Estructura switch-case",
        "Bucles: for, while, do-while",
        "Enhanced for loop (for-each)",
        "Sentencias break y continue",
        "Estructuras de control anidadas",
        "Buenas prácticas en control de flujo"
      ],
      "resources": [
        "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/flow.html",
        "https://www.programiz.com/java-programming/if-else-statement",
        "https://www.geeksforgeeks.org/loops-in-java/"
      ],
      "exercises": [
        "Crear un menú interactivo con switch-case",
        "Programa que encuentre números primos en un rango",
        "Juego de adivinar número con validación de entrada",
        "Calculadora de factorial usando bucles",
        "Tabla de multiplicar con bucles anidados"
      ]
    },
    {
      "title": "Arrays y Colecciones Básicas",
      "description": "Manejo de arrays unidimensionales y multidimensionales.",
      "video": "https://www.youtube.com/embed/Mfacb9T4biQ",
      "duration": "70 minutos",
      "topics": [
        "Declaración e inicialización de arrays",
        "Acceso y modificación de elementos",
        "Propiedades de arrays: length",
        "Arrays multidimensionales",
        "Recorrido de arrays con bucles",
        "Búsqueda y ordenamiento básico",
        "Arrays como parámetros de métodos",
        "Clase Arrays y métodos útiles"
      ],
      "resources": [
        "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html",
        "https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html",
        "https://www.programiz.com/java-programming/arrays"
      ],
      "exercises": [
        "Programa que calcule el promedio de calificaciones",
        "Buscar el número mayor y menor en un array",
        "Crear y llenar una matriz 3x3",
        "Programa que invierta los elementos de un array",
        "Sistema simple de inventario usando arrays"
      ]
    },
    {
      "title": "Métodos y Funciones",
      "description": "Creación de métodos, parámetros, valores de retorno y sobrecarga.",
      "video": "https://www.youtube.com/embed/cCgOESMQe44",
      "duration": "85 minutos",
      "topics": [
        "Definición y llamada de métodos",
        "Métodos con y sin parámetros",
        "Métodos con y sin valor de retorno",
        "Modificadores de acceso: public, private, protected",
        "Métodos estáticos vs métodos de instancia",
        "Sobrecarga de métodos (overloading)",
        "Recursividad",
        "Paso por valor vs paso por referencia",
        "Buenas prácticas en diseño de métodos"
      ],
      "resources": [
        "https://docs.oracle.com/javase/tutorial/java/javaOO/methods.html",
        "https://www.programiz.com/java-programming/methods",
        "https://www.geeksforgeeks.org/methods-in-java/"
      ],
      "exercises": [
        "Crear métodos para operaciones matemáticas básicas",
        "Método recursivo para calcular Fibonacci",
        "Sistema de validación con múltiples métodos",
        "Calculadora modular usando métodos sobrecargados",
        "Métodos para manipular arrays (buscar, ordenar, filtrar)"
      ]
    },
    {
      "title": "Programación Orientada a Objetos - Fundamentos",
      "description": "Clases, objetos, constructores y encapsulación.",
      "video": "https://www.youtube.com/embed/pTB0EiLXX2w",
      "duration": "90 minutos",
      "topics": [
        "Conceptos de POO: clases y objetos",
        "Atributos y métodos de clase",
        "Constructores: default y parametrizados",
        "Encapsulación: getters y setters",
        "Modificadores de acceso",
        "Palabra clave 'this'",
        "Métodos toString() y equals()",
        "Buenas prácticas en diseño de clases"
      ],
      "resources": [
        "https://docs.oracle.com/javase/tutorial/java/concepts/",
        "https://docs.oracle.com/javase/tutorial/java/javaOO/",
        "https://www.programiz.com/java-programming/class-objects"
      ],
      "exercises": [
        "Crear clase Persona con atributos y métodos",
        "Sistema de gestión de estudiantes con POO",
        "Clase Cuenta bancaria con encapsulación",
        "Modelar un sistema de biblioteca con clases",
        "Crear clase Producto para un sistema de ventas"
      ]
    },
    {
      "title": "Herencia y Polimorfismo",
      "description": "Herencia, sobrescritura de métodos, polimorfismo y clases abstractas.",
      "video": "https://www.youtube.com/embed/9JOeqT4nOS4",
      "duration": "95 minutos",
      "topics": [
        "Concepto de herencia: extends",
        "Clase padre (superclass) y clase hija (subclass)",
        "Sobrescritura de métodos (overriding)",
        "Palabra clave 'super'",
        "Polimorfismo y binding dinámico",
        "Clases abstractas y métodos abstractos",
        "Interfaces: definición e implementación",
        "Diferencias entre herencia e interfaces"
      ],
      "resources": [
        "https://docs.oracle.com/javase/tutorial/java/IandI/",
        "https://www.programiz.com/java-programming/inheritance",
        "https://www.geeksforgeeks.org/inheritance-in-java/"
      ],
      "exercises": [
        "Sistema de jerarquía Animal con herencia",
        "Polimorfismo con figuras geométricas",
        "Interface para operaciones CRUD",
        "Sistema de empleados con diferentes tipos",
        "Implementar patrón Template Method"
      ]
    },
    {
      "title": "Manejo de Excepciones",
      "description": "Try-catch, tipos de excepciones y manejo robusto de errores.",
      "video": "https://www.youtube.com/embed/1XAfapkBQjk",
      "duration": "75 minutos",
      "topics": [
        "¿Qué son las excepciones?",
        "Tipos de excepciones: checked vs unchecked",
        "Bloques try-catch-finally",
        "Múltiples bloques catch",
        "Lanzamiento de excepciones: throw y throws",
        "Crear excepciones personalizadas",
        "Best practices en manejo de excepciones",
        "Try-with-resources"
      ],
      "resources": [
        "https://docs.oracle.com/javase/tutorial/essential/exceptions/",
        "https://www.programiz.com/java-programming/exception-handling",
        "https://www.baeldung.com/java-exceptions"
      ],
      "exercises": [
        "Validación robusta de entrada de usuario",
        "Sistema de división con manejo de excepciones",
        "Lectura de archivos con manejo de errores",
        "Crear excepciones personalizadas para un sistema",
        "Calculadora con manejo completo de excepciones"
      ]
    },
    {
      "title": "Colecciones y Estructuras de Datos",
      "description": "ArrayList, HashMap, Set y otras colecciones del framework Collections.",
      "video": "https://www.youtube.com/embed/rxbYvBq3CkA",
      "duration": "85 minutos",
      "topics": [
        "Framework Collections de Java",
        "List: ArrayList, LinkedList",
        "Set: HashSet, TreeSet",
        "Map: HashMap, TreeMap",
        "Iteradores y enhanced for loop",
        "Comparadores: Comparable y Comparator",
        "Operaciones comunes en colecciones",
        "Generics básicos en colecciones",
        "Cuándo usar cada tipo de colección"
      ],
      "resources": [
        "https://docs.oracle.com/javase/tutorial/collections/",
        "https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html",
        "https://www.programiz.com/java-programming/collections"
      ],
      "exercises": [
        "Sistema de gestión de contactos con ArrayList",
        "Eliminar duplicados usando Set",
        "Diccionario de palabras con HashMap",
        "Sistema de calificaciones con TreeMap",
        "Ordenar lista de objetos personalizados"
      ]
    },
    {
      "title": "Entrada/Salida de Archivos",
      "description": "Lectura y escritura de archivos, streams y serialización básica.",
      "video": "https://www.youtube.com/embed/ScUJx4aWRi0",
      "duration": "80 minutos",
      "topics": [
        "Clases File y Path",
        "FileReader y FileWriter",
        "BufferedReader y BufferedWriter",
        "Scanner para lectura de archivos",
        "PrintWriter para escritura",
        "Manejo de rutas relativas y absolutas",
        "Serialización básica de objetos",
        "Try-with-resources para archivos"
      ],
      "resources": [
        "https://docs.oracle.com/javase/tutorial/essential/io/",
        "https://docs.oracle.com/javase/8/docs/api/java/io/package-summary.html",
        "https://www.programiz.com/java-programming/file"
      ],
      "exercises": [
        "Leer y procesar archivo de texto línea por línea",
        "Sistema de log que escriba a archivo",
        "Procesador de CSV con Java",
        "Sistema de persistencia básico para objetos",
        "Copia de archivos con verificación de errores"
      ]
    }
  ],
  "projects": [
    {
      "title": "Proyecto 1: Sistema de Gestión de Biblioteca",
      "description": "Aplicación completa para gestionar libros, usuarios y préstamos usando POO.",
      "requirements": [
        "Clases: Libro, Usuario, Prestamo, Biblioteca",
        "Funcionalidades CRUD para cada entidad",
        "Sistema de búsqueda por diferentes criterios",
        "Manejo de excepciones personalizado",
        "Persistencia en archivos",
        "Interfaz de consola amigable",
        "Validación robusta de datos"
      ],
      "duration": "2-3 semanas"
    },
    {
      "title": "Proyecto 2: Sistema de Gestión de Inventario",
      "description": "Aplicación para manejar productos, categorías, proveedores y ventas.",
      "requirements": [
        "Jerarquía de clases con herencia",
        "Uso de interfaces para operaciones comunes",
        "Colecciones para almacenar datos",
        "Sistema de reportes básicos",
        "Manejo de fechas y cálculos",
        "Menú interactivo completo",
        "Documentación JavaDoc"
      ],
      "duration": "3-4 semanas"
    },
    {
      "title": "Proyecto 3: Juego de Trivia",
      "description": "Juego interactivo con preguntas, puntuación y múltiples niveles.",
      "requirements": [
        "Sistema de preguntas con diferentes categorías",
        "Puntuación y ranking de jugadores",
        "Niveles de dificultad",
        "Persistencia de scores en archivos",
        "Timer para respuestas",
        "Interfaz colorida en consola",
        "Sistema de logros/badges"
      ],
      "duration": "2-3 semanas"
    }
  ],
  "exam": {
    "title": "Examen Final de Java",
    "description": "Evaluación completa de conocimientos de Java desde básico hasta intermedio",
    "duration": "120 minutos",
    "totalQuestions": 30,
    "passingScore": "75%",
    "questions": [
      {
        "id": 1,
        "question": "¿Cuál es la diferencia principal entre JDK, JRE y JVM?",
        "type": "multiple-choice",
        "options": [
          "JDK incluye herramientas de desarrollo, JRE es el entorno de ejecución, JVM ejecuta bytecode",
          "Son lo mismo, solo nombres diferentes",
          "JVM incluye a JRE y JDK",
          "JRE es para desarrollo, JDK para ejecución"
        ],
        "answer": "JDK incluye herramientas de desarrollo, JRE es el entorno de ejecución, JVM ejecuta bytecode",
        "explanation": "JDK (Development Kit) incluye compilador y herramientas, JRE (Runtime Environment) permite ejecutar aplicaciones, JVM (Virtual Machine) ejecuta el bytecode."
      },
      {
        "id": 2,
        "question": "¿Cuál es el tipo de dato primitivo para números decimales de mayor precisión?",
        "type": "multiple-choice",
        "options": [
          "float",
          "double",
          "decimal",
          "real"
        ],
        "answer": "double",
        "explanation": "double es el tipo primitivo de punto flotante de doble precisión en Java."
      },
      {
        "id": 3,
        "question": "¿Qué palabra clave se usa para la herencia en Java?",
        "type": "multiple-choice",
        "options": [
          "inherits",
          "extends",
          "implements",
          "derives"
        ],
        "answer": "extends",
        "explanation": "La palabra clave 'extends' se usa para crear herencia entre clases en Java."
      },
      {
        "id": 4,
        "question": "¿Cuál es la salida de: System.out.println(5 / 2);?",
        "type": "multiple-choice",
        "options": [
          "2.5",
          "2",
          "2.0",
          "Error de compilación"
        ],
        "answer": "2",
        "explanation": "La división entre enteros en Java resulta en un entero, descartando la parte decimal."
      },
      {
        "id": 5,
        "question": "¿Qué modificador de acceso permite acceso solo dentro de la misma clase?",
        "type": "multiple-choice",
        "options": [
          "public",
          "protected",
          "private",
          "default"
        ],
        "answer": "private",
        "explanation": "El modificador 'private' restringe el acceso solo a la misma clase."
      },
      {
        "id": 6,
        "question": "¿Cuál es la diferencia entre == y .equals() para Strings?",
        "type": "multiple-choice",
        "options": [
          "== compara contenido, .equals() compara referencias",
          "== compara referencias, .equals() compara contenido",
          "No hay diferencia",
          "== es más rápido siempre"
        ],
        "answer": "== compara referencias, .equals() compara contenido",
        "explanation": "== compara si dos referencias apuntan al mismo objeto, .equals() compara el contenido de los strings."
      },
      {
        "id": 7,
        "question": "¿Qué colección permite elementos duplicados y mantiene orden de inserción?",
        "type": "multiple-choice",
        "options": [
          "HashSet",
          "TreeSet",
          "ArrayList",
          "HashMap"
        ],
        "answer": "ArrayList",
        "explanation": "ArrayList permite duplicados y mantiene el orden de inserción."
      },
      {
        "id": 8,
        "question": "¿Cuál es la sintaxis correcta para manejar excepciones?",
        "type": "multiple-choice",
        "options": [
          "try { } catch(Exception e) { }",
          "handle { } error(Exception e) { }",
          "attempt { } fail(Exception e) { }",
          "begin { } rescue(Exception e) { }"
        ],
        "answer": "try { } catch(Exception e) { }",
        "explanation": "La sintaxis correcta es try-catch para manejar excepciones en Java."
      },
      {
        "id": 9,
        "question": "¿Qué significa que una clase sea 'abstract'?",
        "type": "multiple-choice",
        "options": [
          "No puede tener métodos",
          "No puede ser instanciada directamente",
          "Solo puede tener métodos estáticos",
          "No puede tener constructores"
        ],
        "answer": "No puede ser instanciada directamente",
        "explanation": "Una clase abstracta no puede ser instanciada con 'new', solo puede ser heredada."
      },
      {
        "id": 10,
        "question": "¿Cuál es la diferencia entre sobrecarga y sobrescritura de métodos?",
        "type": "multiple-choice",
        "options": [
          "Sobrecarga cambia implementación, sobrescritura cambia parámetros",
          "Sobrecarga cambia parámetros en misma clase, sobrescritura cambia implementación en subclase",
          "No hay diferencia",
          "Sobrecarga solo funciona con constructores"
        ],
        "answer": "Sobrecarga cambia parámetros en misma clase, sobrescritura cambia implementación en subclase",
        "explanation": "Overloading permite múltiples métodos con mismo nombre pero diferentes parámetros. Overriding permite a subclases cambiar la implementación de métodos heredados."
      }
    ]
  },
  "additionalResources": {
    "books": [
      "Effective Java by Joshua Bloch",
      "Java: The Complete Reference by Herbert Schildt",
      "Head First Java by Kathy Sierra",
      "Clean Code by Robert Martin",
      "Java Concurrency in Practice by Brian Goetz"
    ],
    "tools": [
      "IntelliJ IDEA Community Edition",
      "Eclipse IDE for Java Developers",
      "Visual Studio Code con Extension Pack for Java",
      "Maven para gestión de dependencias",
      "Git para control de versiones",
      "JUnit para testing"
    ],
    "practiceWebsites": [
      "LeetCode - Problemas de algoritmos",
      "HackerRank - Java challenges",
      "Codewars - Kata de programación",
      "Project Euler - Problemas matemáticos",
      "CodingBat - Ejercicios de Java"
    ],
    "communities": [
      "Stack Overflow",
      "Reddit r/learnjava",
      "Oracle Java Community",
      "JavaRanch Forums",
      "Discord Java Community"
    ],
    "onlineDocumentation": [
      "Oracle Java Documentation",
      "Java Tutorials by Oracle",
      "Baeldung Java Tutorials",
      "GeeksforGeeks Java",
      "Java Code Geeks"
    ]
  },
  "assessmentCriteria": {
    "participation": "10%",
    "exercises": "35%",
    "projects": "40%",
    "finalExam": "15%"
  },
  "nextSteps": {
    "title": "Después de completar este curso",
    "suggestions": [
      "Aprender frameworks como Spring Boot para desarrollo web",
      "Estudiar bases de datos y JDBC para persistencia",
      "Explorar desarrollo de aplicaciones móviles con Android",
      "Profundizar en patrones de diseño",
      "Aprender testing con JUnit y Mockito",
      "Estudiar concurrencia y multithreading",
      "Explorar microservicios y arquitecturas distribuidas",
      "Certificarse con Oracle Java SE Programmer"
    ]
  },
  "developmentEnvironment": {
    "requirements": [
      "JDK 17 o superior (LTS recomendado)",
      "IDE: IntelliJ IDEA Community o Eclipse",
      "Git para control de versiones",
      "Sistema operativo: Windows, macOS o Linux"
    ],
    "optionalTools": [
      "Maven o Gradle para gestión de proyectos",
      "JUnit para testing unitario",
      "Postman para APIs (proyectos avanzados)",
      "Docker (para proyectos finales)"
    ]
  },
  "careerPaths": {
    "title": "Oportunidades profesionales con Java",
    "paths": [
      "Desarrollador Backend Java",
      "Desarrollador Full Stack",
      "Desarrollador de aplicaciones móviles Android",
      "Arquitecto de software",
      "Desarrollador de sistemas empresariales",
      "Consultor técnico Java"
    ]
  }
}